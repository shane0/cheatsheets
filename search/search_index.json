{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>home workflow template buddhism</p> <p>retro games</p> <p>Info</p> <ul> <li>cheats snippets and tiny automation tools to supplement this project template:</li> <li>workflow cookiecutter</li> </ul>"},{"location":"#alias","title":"alias","text":"<ul> <li>mkdocs</li> </ul>"},{"location":"#aliases","title":"aliases","text":"<ul> <li>bullet journaling</li> </ul>"},{"location":"#automation","title":"automation","text":"<ul> <li>regex</li> <li>vim</li> </ul>"},{"location":"#bujo","title":"bujo","text":"<ul> <li>bullet journaling</li> </ul>"},{"location":"#click","title":"click","text":"<ul> <li>mkdocs</li> <li>bullet journaling</li> </ul>"},{"location":"#docs","title":"docs","text":"<ul> <li>markdown</li> </ul>"},{"location":"#markdown","title":"markdown","text":"<ul> <li>markdown</li> </ul>"},{"location":"#mkdocs","title":"mkdocs","text":"<ul> <li>mkdocs</li> </ul>"},{"location":"#readability","title":"readability","text":"<ul> <li>markdown</li> <li>regex</li> </ul>"},{"location":"#regex","title":"regex","text":"<ul> <li>regex</li> <li>vim</li> </ul>"},{"location":"#style-guide","title":"style guide","text":"<ul> <li>regex</li> </ul>"},{"location":"#vim","title":"vim","text":"<ul> <li>vim</li> </ul>"},{"location":"backups/","title":"backups","text":""},{"location":"backups/#usage","title":"usage","text":"<p>folder archive</p> <p>zip2</p> <pre><code>tar -cvf name.tar folder/\ngzip name.tar\n</code></pre> <p>unzip1</p> <pre><code>tar -xzvf name.tar.gz\n</code></pre>"},{"location":"backups/#tar-params","title":"tar params","text":"<ul> <li>-c: Create archive</li> <li>-z: Compress the archive with gzip</li> <li>-v: Verbose output</li> <li> <p>-f: specify the filename of the archive - must be last</p> </li> <li> <p>x: tar can collect files or extract them. x does the latter.</p> </li> <li>z: decompress the archive using gzip</li> </ul>"},{"location":"backups/#rsync","title":"rsync","text":"<p>this can deploy a mkdocs site to nginx just adjust the folder names</p> <p>this version also changes ownership which you may not need depending how you setup your groups and permissions</p> <pre><code>#!/bin/sh\nsudo rsync -a -v /home/user/your.com/site/* /var/www/your.com/\nsudo chown root:root /var/www/your.com/\n</code></pre> <pre><code>curl cheat.sh/\ntar\n# tar\n# Archiving utility.\n# Often combined with a compression method, such as gzip or bzip.\n# More information: &lt;https://www.gnu.org/software/tar&gt;.\n\n# Create an archive from files:\ntar cf target.tar file1 file2 file3\n\n# Create a gzipped archive:\ntar czf target.tar.gz file1 file2 file3\n\n# Create a gzipped archive from a directory using relative paths:\ntar czf target.tar.gz -C path/to/directory .\n\n# Extract a (compressed) archive into the current directory:\ntar xf source.tar[.gz|.bz2|.xz]\n\n# Extract an archive into a target directory:\ntar xf source.tar -C directory\n\n# Create a compressed archive, using archive suffix to determine the compression program:\ntar caf target.tar.xz file1 file2 file3\n\n# List the contents of a tar file:\ntar tvf source.tar\n\n# Extract files matching a pattern:\ntar xf source.tar --wildcards \"*.html\"\n\n# Extract a specific file without preserving the folder structure:\ntar xf source.tar source.tar/path/to/extract --strip-components=depth_to_strip\n</code></pre> <ol> <li> <p>https://www.linode.com/docs/quick-answers/linux/compress-files-using-the-command-line/#archive-a-directory)\u00a0\u21a9</p> </li> <li> <p>https://www.howtogeek.com/248780/how-to-compress-and-extract-files-using-the-tar-command-on-linux/ \u21a9</p> </li> </ol>"},{"location":"bash/","title":"bash","text":"<pre><code>#!/usr/bin/env bash\nalias ea='code ~/.bash_aliases'\nalias sa='source ~/.bashrc'\nalias yourserver='ssh user@0.0.0.0'\nalias yourservers='ssh user@0.0.0.0'\nalias c='clear'\n# ls \nalias ll='ls -l'\nalias la='ls -A'\nalias l='ls -CF'\nalias lt='ls --human-readable --size -1 -S --classify'\nalias ctodo='cp -R ~/workflow/todocli/ .'\nalias showremote='echo \"https://github.com/\" $(head -1 &lt;(git remote -v | cut -d \":\" -f2 | cut -d \".\" -f1 | tr -s \" \" \"\\0\"))'\nalias mks='mkdocs serve'\n</code></pre> <ul> <li>config file <code>.inputrc</code></li> </ul> <pre><code>set editing-mode vi\nbind TAB:menu-complete\n</code></pre>"},{"location":"click/","title":"click","text":"<p>click docs workflow cookiecutter</p> <ul> <li>click is a simple and powerful command line automation library in python</li> <li>coming soon: plugins for web apps and cloud services</li> </ul>"},{"location":"cookiecutter/","title":"cookiecutter","text":"<p>workflow cookiecutter</p> <pre><code># cookiecutter fix\nexport PATH=$HOME/.local/bin:$PATH\nalias newf='mkdir {utils,bujo,data,docs,results,scripts,srcrtests}'\nalias wf='cookiecutter workflow'\n</code></pre>"},{"location":"css/","title":"css","text":""},{"location":"django/","title":"django","text":"<pre><code># django\nalias dr='python manage.py runserver 8000'\n</code></pre> <pre><code>python manage.py runserver\npython manage.py makemigrations\npython manage.py migrate\npython manage.py migrate --run-syncdb\n</code></pre>"},{"location":"find/","title":"Find","text":""},{"location":"find/#find","title":"find","text":"<ul> <li>find file by type &amp; grep it</li> </ul> <pre><code>find . -name \\*.md -print0 | xargs -0 grep runner\n</code></pre> <pre><code>find . -type f -print | xargs grep \"example\"\n</code></pre>"},{"location":"fixtures/","title":"fixtures","text":"<p>Python fixtures are functions that provide data, objects, or resources to test functions.</p> <p>They are defined in test files and can be shared across test functions.</p> <p>Fixtures can help simplify test code and make tests more modular and reusable.</p> <p>The main features of Python fixtures are:</p> <ul> <li>Reusable: Fixtures can be reused across multiple test functions. This can save time and effort, and help to make tests more concise and readable.</li> <li>Modular: Fixtures can be used to modularize test code, making it easier to maintain and update.</li> <li>Scoped: Fixtures can be scoped to different levels, such as function, class, module, or session. This allows you to control when fixtures are created and destroyed, and how they are shared between tests.</li> <li>Parametrized: Fixtures can be parametrized to run with different values. This can be useful for testing different scenarios or configurations.</li> </ul> <p>Here are some examples of how Python fixtures can be used:</p> <ul> <li>Provide test data: Fixtures can be used to provide test data to test functions. This can help to reduce the amount of boilerplate code in tests, and make tests more robust.</li> <li>Create mock objects: Fixtures can be used to create mock objects for use in tests. This can be useful for testing code that interacts with external systems or resources.</li> <li>Set up test environments: Fixtures can be used to set up test environments, such as databases or web servers. This can be useful for testing code that interacts with these systems.</li> </ul> <p>Overall, Python fixtures are a powerful tool that can be used to make tests more reusable, modular, and robust.</p> <p>Here are some additional benefits of using Python fixtures:</p> <ul> <li>Tests are more reliable: Fixtures can help to ensure that tests are more reliable by providing a consistent environment for each test to run in.</li> <li>Tests are easier to maintain: Fixtures can make tests easier to maintain by encapsulating complex setup and teardown code.</li> <li>Tests are more readable: Fixtures can make tests more readable by removing boilerplate code from test functions.</li> </ul> <p>If you are writing Python tests, I encourage you to use fixtures to make your tests more reusable, modular, and robust.</p>"},{"location":"fixtures/#example","title":"example","text":"<p>Sure, here is an example of a Python fixture that does not use any database:</p> <pre><code>import pytest\n# Define a fixture that provides a list of numbers\n@pytest.fixture\ndef numbers():\nreturn [1, 2, 3, 4, 5]\n# Define a test function that uses the numbers fixture\ndef test_sum_of_numbers(numbers):\nassert sum(numbers) == 15\n# Run the test\npytest.main()\n</code></pre> <p>This fixture simply returns a list of numbers. The test function then uses the list of numbers to calculate the sum and assert that it is equal to 15.</p> <p>This example shows how fixtures can be used to provide any kind of data to tests, not just database connections. Fixtures can be used to provide test data, mock objects, or any other resources that your tests need.</p> <p>Here is another example of a fixture that does not use any database:</p> <pre><code>import pytest\n# Define a fixture that provides a mock object for a file system\n@pytest.fixture\ndef mock_file_system():\nclass MockFileSystem:\ndef __init__(self):\nself.files = {}\ndef read_file(self, filename):\nreturn self.files[filename]\ndef write_file(self, filename, content):\nself.files[filename] = content\nreturn MockFileSystem()\n# Define a test function that uses the mock_file_system fixture\ndef test_write_file(mock_file_system):\n# Write some content to a file\nmock_file_system.write_file(\"my_file.txt\", \"Hello, world!\")\n# Read the content back from the file\ncontent = mock_file_system.read_file(\"my_file.txt\")\n# Assert that the content is correct\nassert content == \"Hello, world!\"\n# Run the test\npytest.main()\n</code></pre> <p>This fixture provides a mock object for a file system. The test function then uses the mock file system to write some content to a file and read it back. Finally, the test function asserts that the content is correct.</p> <p>This example shows how fixtures can be used to provide mock objects to tests. Mock objects can be useful for testing code that interacts with external systems or resources.</p> <p>Overall, fixtures are a powerful tool that can be used to provide any kind of data, objects, or resources to tests. This can make tests more reusable, modular, and robust.</p>"},{"location":"fixtures/#sqlite-example","title":"sqlite example","text":"<pre><code>import pytest\nimport sqlite3\n# Define a fixture that provides a database connection\n@pytest.fixture\ndef database_connection():\nconn = sqlite3.connect(\":memory:\")\nyield conn\nconn.close()\n# Define a test function that uses the database_connection fixture\ndef test_create_user(database_connection):\n# Create a new user in the database\ncur = database_connection.cursor()\ncur.execute(\"CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT)\")\ncur.execute(\"INSERT INTO users (name) VALUES (?)\", (\"John Doe\",))\ndatabase_connection.commit()\n# Assert that the user was created successfully\ncur.execute(\"SELECT * FROM users\")\nuser = cur.fetchone()\nassert user[1] == \"John Doe\"\n# Run the test\npytest.main()\n</code></pre> <p>This fixture uses the <code>sqlite3</code> library to connect to a database in memory. The test function then uses the connection to create a new user table and insert a new user into the table. Finally, the test function asserts that the user was created successfully.</p> <p>This example shows how fixtures can be used to provide resources to tests without using any third-party libraries. This can be useful if you want to keep your tests as independent as possible.</p>"},{"location":"fixtures/#db-example","title":"db example","text":"<p>Python fixtures are functions that provide data, objects, or resources to test functions. They are defined in test files and can be shared across test functions. Fixtures can help simplify test code and make tests more modular and reusable.</p> <p>The main features of Python fixtures are:</p> <ul> <li>Reusable: Fixtures can be reused across multiple test functions. This can save time and effort, and help to make tests more concise and readable.</li> <li>Modular: Fixtures can be used to modularize test code, making it easier to maintain and update.</li> <li>Scoped: Fixtures can be scoped to different levels, such as function, class, module, or session. This allows you to control when fixtures are created and destroyed, and how they are shared between tests.</li> <li> <p>Parametrized: Fixtures can be parametrized to run with different values. This can be useful for testing different scenarios or configurations.</p> </li> <li> <p>examples of how Python fixtures can be used:</p> </li> <li> <p>Provide test data: Fixtures can be used to provide test data to test functions. This can help to reduce the amount of boilerplate code in tests, and make tests more robust.</p> </li> <li>Create mock objects: Fixtures can be used to create mock objects for use in tests. This can be useful for testing code that interacts with external systems or resources.</li> <li> <p>Set up test environments: Fixtures can be used to set up test environments, such as databases or web servers. This can be useful for testing code that interacts with these systems.</p> </li> <li> <p>additional benefits of using Python fixtures:</p> </li> <li> <p>Tests are more reliable: Fixtures can help to ensure that tests are more reliable by providing a consistent environment for each test to run in.</p> </li> <li>Tests are easier to maintain: Fixtures can make tests easier to maintain by encapsulating complex setup and teardown code.</li> <li>Tests are more readable: Fixtures can make tests more readable by removing boilerplate code from test functions.</li> </ul>"},{"location":"flask/","title":"flask","text":"<pre><code>flask stuff\nalias efl='export FLASK_ENV=development'\nalias eefl='echo $FLASK_ENV'\nalias fdm='flask db migrate'\nalias fdu='flask db upgrade'\n</code></pre>"},{"location":"folders/","title":"folders","text":"<p>find the size of a folder</p> <pre><code>du -sh /dirname\n</code></pre> <pre><code>mkdir \"$(date +\"%F\")\"\n</code></pre>"},{"location":"fzf/","title":"fuzzy finder","text":"<ul> <li>https://github.com/junegunn/fzf</li> </ul>"},{"location":"html/","title":"html","text":""},{"location":"jobs/","title":"jobs","text":"<pre><code>jobs\n</code></pre> <ul> <li>if there is one open stopped you can bring it to the foreground</li> </ul> <pre><code>fg\n</code></pre> <ul> <li>or you can kill it</li> </ul> <pre><code>jobs -p | xargs kill -9\n</code></pre>"},{"location":"js/","title":"js","text":""},{"location":"julian/","title":"julian dates","text":"<ul> <li>I find julian dates useful for various reasons</li> </ul> <pre><code># julian dates\nalias day='date +%D &amp;&amp; date +%j &amp;&amp; date +%A &amp;&amp; date +%d &amp;&amp; date +%u'\nalias fday='mkdir \"$(date +%j)\" &amp;&amp; cd \"$(date +%j)\"'\nalias mday='vim ./\"$(date +%j)\".md'\nalias fj='vim ./\"$(date +%F)\".md'\nalias week='date +%V'\nalias month='date +%B &amp;&amp; date +%m'\nalias year='date +%Y'\n</code></pre>"},{"location":"linux/","title":"linux","text":"<pre><code>alias r='ranger'\n# tmux\nalias ta='tmux attach -t'\nalias tl='tmux list-sessions'\nalias tksv='tmux kill-server'\nalias tkss='tmux kill-session -t'\nalias v='vi $(fzf)'\n# free space\nalias freespace='df -H --output=size,used,avail'\nalias fspace='sudo du -Sh | sort -rh | head -5'\nalias cports='sudo lsof -i -P -n | grep LISTEN'\n# commenting for shellcheck fixme later\n#alias trace='mtr --report-wide --curses $1'\n#alias killtcp='sudo ngrep -qK 1 $1 -d wlan0'\nalias usage='ifconfig wlan0 | grep bytes'\nalias connections='sudo lsof -n -P -i +c 15'\n# alias ducks='du -cks -- * | sort -rn | head\\'alias ducks=\\'du -cks -- * | sort -rn | head'\nalias myip='ip addr | grep inet'\n</code></pre>"},{"location":"macos/","title":"mac os","text":"<pre><code># macos find what is listening\nalias whohearsme='sudo lsof -i -P | grep LISTEN | grep :$PORT'\n# opens finder form terminal - open .\n# for mac\nalias lt='du -sh * | sort -h'\nalias howmany='find . -type f -print | wc -l'\n</code></pre>"},{"location":"markdown/","title":"markdown","text":"","tags":["markdown","docs","readability"]},{"location":"markdown/#configuration-file","title":"configuration file","text":"<ul> <li><code>.markdownlint.json</code></li> </ul> <pre><code>{\n\"ignore\": [\n\"index.md\",\n\"future.md\"\n],\n\"default\": true,\n\"MD013\": false,\n\"MD033\": false,\n\"MD024\": false,\n\"MD026\": false,\n\"MD041\": false,\n\"MD046\": false,\n\"MD045\": false\n}\n</code></pre>","tags":["markdown","docs","readability"]},{"location":"markdown/#alias","title":"alias","text":"<pre><code># this calls a click command that runs markdownlint\n# on my mac uses fli normally I use cli\nalias zz='fli bujo zl'\n</code></pre>","tags":["markdown","docs","readability"]},{"location":"markdown/#click","title":"click","text":"<pre><code>Usage: cli.py bujo [OPTIONS] COMMAND [ARGS]...\n\nbullet journaling &amp; todocli\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  zl         markdownlint\n</code></pre> <ul> <li>that calls the markdownlint command line</li> </ul> <pre><code>@cli.command()\ndef zl():\n    \"\"\"markdownlint\"\"\"\ncmd = \"npx markdownlint 'docs/*.md' --config .markdownlint.json\"\nos.system(cmd)\n</code></pre>","tags":["markdown","docs","readability"]},{"location":"markdown/#github-action","title":"github action","text":"<ul> <li><code>.github/workflows/markdownlint.yml</code></li> </ul> <pre><code>name: markdownlint\n\non: [push, pull_request]\n\njobs:\n  markdownlint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Install dependencies\n        run: npm install markdownlint-cli\n      - name: Run markdownlint\n        run: npx markdownlint 'docs/index.md' --config .markdownlint.json --ignore docs/*.md\n</code></pre>","tags":["markdown","docs","readability"]},{"location":"markdown/#command-line","title":"command line","text":"<pre><code>Usage: markdownlint [options] &lt;files|directories|globs&gt;\n\nMarkdownLint Command Line Interface\n\nOptions:\n  -V, --version                               output the version number\n  -c, --config [configFile]                   configuration file (JSON, JSONC, JS, or YAML)\n-d, --dot                                   include files/folders with a dot (for example `.github`)\n-f, --fix                                   fix basic errors (does not work with STDIN)\n-i, --ignore [file|directory|glob]          file(s) to ignore/exclude (default: [])\n-j, --json                                  write issues in json format\n  -o, --output [outputFile]                   write issues to file (no console)\n-p, --ignore-path [file]                    path to file with ignore pattern(s)\n-q, --quiet                                 do not write issues to STDOUT\n  -r, --rules  [file|directory|glob|package]  include custom rule files (default: [])\n-s, --stdin                                 read from STDIN (does not work with files)\n--enable [rules...]                         Enable certain rules, e.g. --enable MD013 MD041 --\n  --disable [rules...]                        Disable certain rules, e.g. --disable MD013 MD041 --\n  -h, --help                                  display help for command\n</code></pre>","tags":["markdown","docs","readability"]},{"location":"mkdocs/","title":"mkdocs","text":"","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#alias","title":"alias","text":"<ul> <li>serve with alias</li> </ul> <pre><code>alias mks='mkdocs serve'\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#click","title":"click","text":"<ul> <li>serve with click</li> </ul> <pre><code>cli bujo m\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#citation1","title":"citation1","text":"<pre><code>- this[^1]\n[^1]: requires software installation\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#includes","title":"includes","text":"<ul> <li><code>-8&lt;- \"includes/example.md\"</code></li> <li>embed docs on multiple pages</li> <li>you can also splice in partial files using line numbers <code>example.md:2:5</code></li> </ul> <pre><code># example include\n- this file is at: `includes/example.md`\n- it can be rendered on any page using the example snippet\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#site-wide-glossary","title":"site wide glossary","text":"<ul> <li>mouse over this: PRAJNA</li> <li>add more here: <code>includes/abbreviations.md</code></li> </ul> <pre><code>pip install pymdown-extensions\n</code></pre> <pre><code>python3 -m venv venv\nsource venv/bin/activate\npip install mkdocs mkdocs-material\nmkdocs serve\n</code></pre> <pre><code>pip show mkdocs-material\npip install --upgrade mkdocs-material\n</code></pre> <pre><code>pip install --upgrade mkdocs-material\n</code></pre>","tags":["alias","mkdocs","click"]},{"location":"mkdocs/#github-actions","title":"github actions","text":"<ul> <li>this site is deployed using this command <code>mkdocs gh-deploy</code></li> <li>github pages actions deploys updates on this branch <code>gh-pages</code></li> </ul> <ol> <li> <p>citations go here\u00a0\u21a9</p> </li> </ol>","tags":["alias","mkdocs","click"]},{"location":"mongo/","title":"mongo","text":""},{"location":"pip/","title":"pip","text":"<p>save your package list</p> <pre><code>pip freeze &gt;&gt; requirements.txt\n</code></pre> <p>install your package list on another machine</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>updates</p> <pre><code>pip install --upgrade mkdocs-material\n</code></pre>"},{"location":"postgres/","title":"postgres","text":"<p>PostgreSQL command line:</p> <p>Connecting to PostgreSQL</p> <pre><code>psql -U username -d database\n</code></pre> <p>This will connect you to the PostgreSQL server as the specified user and database.</p> <p>Creating a table</p> <pre><code>CREATE TABLE table_name (\ncolumn_name1 data_type1,\ncolumn_name2 data_type2,\n...\n);\n</code></pre> <p>This will create a table with the specified name and columns.</p> <p>Inserting data into a table</p> <pre><code>INSERT INTO table_name (column_name1, column_name2, ...) VALUES (value1, value2, ...);\n</code></pre> <p>This will insert a new row into the specified table with the specified values.</p> <p>Selecting data from a table</p> <pre><code>SELECT * FROM table_name;\n</code></pre> <p>This will select all of the rows from the specified table. You can also specify specific columns to select by adding their names to the <code>SELECT</code> clause.</p> <p>Updating data in a table</p> <pre><code>UPDATE table_name SET column_name = new_value WHERE condition;\n</code></pre> <p>This will update the value of the <code>column_name</code> column in all of the rows in the table that meet the <code>condition</code>.</p> <p>Deleting data from a table</p> <pre><code>DELETE FROM table_name WHERE condition;\n</code></pre> <p>This will delete all of the rows in the table that meet the <code>condition</code>.</p> <p>Other common commands</p> <ul> <li><code>\\l</code>: List all of the databases on the server.</li> <li><code>\\c database_name</code>: Connect to the specified database.</li> <li><code>\\d table_name</code>: Describe the specified table.</li> <li><code>\\q</code>: Quit PostgreSQL.</li> </ul> <p>Example queries</p> <pre><code># Create a table called users with two columns, id and name\nCREATE TABLE users (\nid INT PRIMARY KEY,\nname VARCHAR(255)\n);\n# Insert a new row into the users table\nINSERT INTO users (id, name) VALUES (1, 'John Doe');\n# Select all of the users from the users table\nSELECT * FROM users;\n# Select the user with the ID of 1\nSELECT * FROM users WHERE id = 1;\n# Update the name of the user with the ID of 1 to \"Jane Doe\"\nUPDATE users SET name = 'Jane Doe' WHERE id = 1;\n# Delete the user with the ID of 1\nDELETE FROM users WHERE id = 1;\n</code></pre>"},{"location":"powershell/","title":"powershell","text":""},{"location":"powershell/#zip-folder","title":"zip folder","text":"<pre><code>#backup any folder\nfunction zipit{\nparam([string]$copyme)\nif (-not (test-path \"$env:ProgramFiles\\7-Zip\\7z.exe\")) {throw \"$env:ProgramFiles\\7-Zip\\7z.exe needed\"} \nset-alias sz \"$env:ProgramFiles\\7-Zip\\7z.exe\" \n$Source = \"$copyme\"\n$Target = \"$copyme\\copy.zip\"\nsz a -mx=9 $Target $Source\n}\nzipit c:\\path\n</code></pre>"},{"location":"python/","title":"python","text":"<pre><code>#alias vba='. venv/bin/activate'\nalias vvv='virtualevn venv'\nalias vv='source venv/bin/activate'\nalias vf='pip install --editable .'\nalias vr='pip install -r requirements.txt'\n</code></pre> <ul> <li>python docs</li> <li>cht sh</li> <li>rosetta code</li> <li>talk python</li> <li></li> <li> </li> <li> <p>quick web server</p> </li> </ul> <pre><code>python -m SimpleHTTPServer 8000\n</code></pre>"},{"location":"react/","title":"react","text":""},{"location":"regex/","title":"regex","text":"<ul> <li>regex is an extremely powerful tool for editing text and automation</li> <li>you can fix a problem with regex </li> <li>try it: https://regex101.com/</li> </ul>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#between-around","title":"between around","text":"<ul> <li>find text with something before, in between or after</li> </ul> <pre><code>(?&lt;=This is)(.*)(?=sentence)\n</code></pre> <ul> <li>Groups &amp; Lookaround</li> </ul> <pre><code>(abc) capture group\n\\1 backreference to group #1\n(?:abc) non-capturing group\n(?=abc) positive lookahead\n(?!abc) negative lookahead\n</code></pre>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#remove-blank-lines","title":"remove blank lines","text":"<p>^(\\s)*$\\n</p>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#timestamps","title":"timestamps","text":"<p>remove some timestamps from end of ticket summary</p> <pre><code>\\ \\d{1,}.*$\n</code></pre>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#validation","title":"validation","text":"<p>email</p> <pre><code>\"^[a-zA-Z][\\w\\.-]*[a-zA-Z0-9]@[a-zA-Z0-9][\\w\\.-]*[a-zA-Z0-9]\\.[a-zA-Z][a-zA-Z\\.]*[a-zA-Z]$\"\n</code></pre>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#past-or-future-tense","title":"past or future tense","text":"<ul> <li>docs should be in present tense</li> </ul> <p>To write a regular expression that replaces any upper case with its lower case, you can use the following pattern:</p> <p>\" [A-Z] \"</p> <p>This pattern matches any single uppercase letter.</p> <p>To replace the matched patterns with their lower case equivalents, you can use the following replacement string:</p> <p>\" \\l \"</p> <p>This replacement string uses the <code>\\l</code> modifier to convert the matched character to lowercase.</p> <p>Here is an example of how to use this regular expression in Python:</p> <pre><code>import re\nstring = \"THIS IS AN UPPERCASE STRING.\"\n# Replace any upper case with its lower case\nnew_string = re.sub(r'[A-Z]', r'\\l', string)\n# Print the new string\nprint(new_string)\n</code></pre> <p>Output:</p> <pre><code>this is an uppercase string.\n</code></pre> <p>This regular expression can be used in any programming language that supports regular expressions.</p>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#passive-voice","title":"passive voice","text":"<ul> <li>you should write doc in active voice</li> </ul> <p>To write a regular expression that replaces any upper case with its lower case, you can use the following pattern:</p> <p>\" [A-Z] \"</p> <p>This pattern matches any single uppercase letter.</p> <p>To replace the matched patterns with their lower case equivalents, you can use the following replacement string:</p> <p>\" \\l \"</p> <p>This replacement string uses the <code>\\l</code> modifier to convert the matched character to lowercase.</p> <p>Here is an example of how to use this regular expression in Python:</p> <pre><code>import re\nstring = \"THIS IS AN UPPERCASE STRING.\"\n# Replace any upper case with its lower case\nnew_string = re.sub(r'[A-Z]', r'\\l', string)\n# Print the new string\nprint(new_string)\n</code></pre> <p>Output:</p> <pre><code>this is an uppercase string.\n</code></pre> <p>This regular expression can be used in any programming language that supports regular expressions.</p>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#capitol-to-lower","title":"capitol to lower","text":"<p>To write a regular expression that replaces any upper case with its lower case, you can use the following pattern:</p> <p>\" [A-Z] \"</p> <p>This pattern matches any single uppercase letter.</p> <p>To replace the matched patterns with their lower case equivalents, you can use the following replacement string:</p> <p>\" \\l \"</p> <p>This replacement string uses the <code>\\l</code> modifier to convert the matched character to lowercase.</p> <p>Here is an example of how to use this regular expression in Python:</p> <pre><code>import re\nstring = \"THIS IS AN UPPERCASE STRING.\"\n# Replace any upper case with its lower case\nnew_string = re.sub(r'[A-Z]', r'\\l', string)\n# Print the new string\nprint(new_string)\n</code></pre> <p>Output:</p> <pre><code>this is an uppercase string.\n</code></pre> <p>This regular expression can be used in any programming language that supports regular expressions.</p>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#title-case","title":"title case","text":"<p>To write a regular expression that replaces any word using Title case with lower case title, you can use the following pattern:</p> <pre><code>\\b[A-Z]\\w+\\b\n</code></pre> <p>This pattern matches any word that starts with an uppercase letter (<code>\\b[A-Z]</code>) followed by one or more lowercase letters (<code>\\w+</code>). <code>\\b</code> is a word boundary, which ensures that the match is a complete word and not just part of a larger word.</p> <p>To replace the matched patterns with lower case title, you can use the following replacement string:</p> <pre><code>\\1\\L$2\n</code></pre> <p>This replacement string uses the capture group <code>\\1</code> to capture the first letter of the matched word. It then uses the <code>\\L</code> modifier to convert the first letter to lowercase. The <code>$2</code> capture group is used to capture the rest of the matched word, which is then left unchanged.</p> <p>Here is an example of how to use this regular expression in Python:</p> <pre><code>import re\nstring = \"This Is A Title Case String.\"\n# Replace any word using Title case with lower case title\nnew_string = re.sub(r'\\b[A-Z]\\w+\\b', r'\\1\\L$2', string)\n# Print the new string\nprint(new_string)\n</code></pre> <p>Output:</p> <pre><code>This is a title case string.\n</code></pre> <p>This regular expression can be used in any programming language that supports regular expressions.</p>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#trailing","title":"trailing .","text":"<p>To write a regular expression that replaces trailing . symbols with nothing, you can use the following pattern:</p> <pre><code>\\.+$\n</code></pre> <p>This pattern matches one or more periods (<code>.</code>) at the end of the string (<code>$</code>).</p> <p>To replace the matched patterns with nothing, you can use the following replacement string:</p> <pre><code>\"\"\n</code></pre> <p>This is an empty string, so it will effectively remove the trailing periods.</p> <p>Here is an example of how to use this regular expression in Python:</p> <pre><code>import re\nstring = \"This string has a trailing period.\"\n# Replace the trailing . with nothing\nnew_string = re.sub(r'\\.$', \"\", string)\n# Print the new string\nprint(new_string)\n</code></pre> <p>Output:</p> <pre><code>This string has a trailing period\n</code></pre> <p>This regular expression can be used in any programming language that supports regular expressions.</p>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#old-examples","title":"old examples","text":"","tags":["regex","automation","readability","style guide"]},{"location":"regex/#old-micro-app","title":"old micro app","text":"<pre><code>        $cleanoutput = $_.ToString() -replace 'System.Exception: ERROR: ', \"\"\n$cleanoutput = $cleanoutput.Split(\",\")\n$regname = [regex]\"(?&lt;=\\[\\\\\\\\server\\\\path\\\\path\\\\\\d{3}Matchme_)(.*?)(?=\\\\0)\"\n$cleanname = $regname.Match($cleanoutput)\nwrite-host $cleanname\n$html += \"&lt;br&gt;\"\n$html += $cleanname\n$regtranid = [regex]\"(?&lt;=The)(.*?)(?=has)\"\n$cleantran = $regtranid.Match($cleanoutput)\nwrite-host $cleantran\n</code></pre>","tags":["regex","automation","readability","style guide"]},{"location":"regex/#utilities","title":"utilities","text":"<p>searching for useful logging</p> <pre><code>    $badlist | ForEach-Object {\nWrite-Host\n$_ | select *\n$_.name -replace '\\\\\\\\server\\\\', ''`\n-replace 'c\\$\\\\server\\\\Output\\\\', ''`\n-replace 'serverOutput\\d{3}\\\\', ''`\n-replace '\\\\\\d{3}_\\d{14}\\.out'\n} | Get-Unique -OutVariable $fixed\n</code></pre>","tags":["regex","automation","readability","style guide"]},{"location":"scraping/","title":"scraping content","text":"<p>scrape an mp3</p> <pre><code>wget -r -l1 -H -nd -A mp3 -e robots=off http://example/url\n</code></pre>"},{"location":"todocli/","title":"todo cli","text":"<ul> <li>included in this cookiecutter template</li> </ul> <p>workflow cookiecutter</p> <pre><code># todocli.md todocli app\nalias t='clear &amp;&amp; ./todocli/todo.sh'\nalias d='clear &amp;&amp; t listpri a'\nalias snooze='clear &amp;&amp; t listpri'\nalias done='clear &amp;&amp; cat ./todocli/done.txt'\nalias tedit='vim ./todocli/todo.txt'\nalias tall='clear &amp;&amp; find . -name \"todo.txt\" | xargs grep \"+\"'\nalias tpri='clear &amp;&amp; find . -name \"todo.txt\" | xargs grep \"(A\"'\nalias tprib='clear &amp;&amp; find . -name \"todo.txt\" | xargs grep \"(B\"'\nalias tpric='clear &amp;&amp; find . -name \"todo.txt\" | xargs grep \"(C\"'\nalias thelp='clear &amp;&amp; ./todocli/todo.sh shorthelp'\n</code></pre> <p></p>"},{"location":"users/","title":"users","text":"<p>see who is logged in</p> <pre><code>w\n</code></pre> <p>kill their session</p> <pre><code>pkill -KILL -u theirusername\n</code></pre> <pre><code>/etc/group\n</code></pre> <p>change owner</p> <pre><code>chown -R username folder/\n</code></pre>"},{"location":"vim/","title":"vim","text":"<ul> <li>vim is an extremely powerful tool for editing text and automation</li> </ul>","tags":["vim","regex","automation"]},{"location":"vim/#record-and-playback","title":"record and playback","text":"<ol> <li>q then any letter to start recording</li> <li>q to stop recording</li> <li>playback with @(your letter)</li> <li>use numbers to repeat e.g. 4@f repeats macro f four times</li> </ol>","tags":["vim","regex","automation"]},{"location":"vim/#vim-in-the-browser","title":"vim in the browser","text":"<ul> <li>vimium</li> </ul>","tags":["vim","regex","automation"]},{"location":"vim/#vim-in-the-command-line","title":"vim in the command line","text":"<pre><code># vim mode\n# to revert for someone that doesnt use vi\nset -o vi\n# set -o emacs\n#bindkey -v\n</code></pre> <pre><code>.---------------------------------------------------------------------------.\n|                                                                           |\n|                          Readline VI Editing Mode                         |\n|                     Default Keyboard Shortcuts for Bash                   |\n|                               Cheat Sheet                                 |\n|                                                                           |\n'---------------------------------------------------------------------------'\n| Peteris Krumins (peter@catonmat.net), 2008.01.08                          |\n| http://www.catonmat.net  -  good coders code, great reuse                 |\n|                                                                           |\n| Released under the GNU Free Document License                              |\n'---------------------------------------------------------------------------'\n\n ======================== Keyboard Shortcut Summary ========================\n\n.--------------.------------------------------------------------------------.\n|              |                                                            |\n| Shortcut     | Description                                                |\n|              |                                                            |\n'--------------'------------------------------------------------------------'\n| Switching to COMMAND Mode:                                                |\n'--------------.------------------------------------------------------------'\n| ESC          | Switch to command mode.                                    |\n'--------------'------------------------------------------------------------'\n| Commands for Entering INPUT Mode:                                         |\n'--------------.------------------------------------------------------------'\n| i            | Insert before cursor.                                      |\n'--------------+------------------------------------------------------------'\n| a            | Insert after cursor.                                       |\n'--------------+------------------------------------------------------------'\n| I            | Insert at the beginning of line.                           |\n'--------------+------------------------------------------------------------'\n| A            | Insert at the end of line.                                 |\n'--------------+------------------------------------------------------------'\n| c&lt;mov. comm&gt; | Change text of a movement command &lt;mov. comm&gt; (see below). |\n'--------------+------------------------------------------------------------'\n| C            | Change text to the end of line (equivalent to c$).         |\n'--------------+------------------------------------------------------------'\n| cc or S      | Change current line (equivalent to 0c$).                   |\n'--------------+------------------------------------------------------------'\n| s            | Delete a single character under the cursor and enter input |\n|              | mode (equivalent to c[SPACE]).                             |\n'--------------+------------------------------------------------------------'\n| r            | Replaces a single character under the cursor (without      |\n|              | leaving command mode).                                     |\n'--------------+------------------------------------------------------------'\n| R            | Replaces characters under cursor.                          |\n'--------------+------------------------------------------------------------'\n| v            | Edit (and execute) the current command in the text editor. |\n|              | (an editor defined in $VISUAL or $EDITOR variables, or vi  |\n'--------------'------------------------------------------------------------'\n| Basic Movement Commands (in command mode):                                |\n'--------------.------------------------------------------------------------'\n| h            | Move one character right.                                  |\n'--------------+------------------------------------------------------------'\n| l            | Move one character left.                                   |\n'--------------+------------------------------------------------------------'\n| w            | Move one word or token right.                              |\n'--------------+------------------------------------------------------------'\n| b            | Move one word or token left.                               |\n'--------------+------------------------------------------------------------'\n| W            | Move one non-blank word right.                             |\n'--------------+------------------------------------------------------------'\n| B            | Move one non-blank word left.                              |\n'--------------+------------------------------------------------------------'\n| e            | Move to the end of the current word.                       |\n'--------------+------------------------------------------------------------'\n| E            | Move to the end of the current non-blank word.             |\n'--------------+------------------------------------------------------------'\n| 0            | Move to the beginning of line                              |\n'--------------+------------------------------------------------------------'\n| ^            | Move to the first non-blank character of line.             |\n'--------------+------------------------------------------------------------'\n| $            | Move to the end of line.                                   |\n'--------------+------------------------------------------------------------'\n| %            | Move to the corresponding opening/closing bracket.         |\n'--------------'------------------------------------------------------------'\n| Character Finding Commands (these are also Movement Commands):            |\n'--------------.------------------------------------------------------------'\n| fc           | Move right to the next occurance of char c.                |\n'--------------+------------------------------------------------------------'\n| Fc           | Move left to the previous occurance of c.                  |\n'--------------+------------------------------------------------------------'\n| tc           | Move right to the next occurance of c, then one char       |\n|              | backward.                                                  |\n'--------------+------------------------------------------------------------'\n| Tc           | Move left to the previous occurance of c, then one char    |\n|              | forward.                                                   |\n'--------------+------------------------------------------------------------'\n| ;            | Redo the last character finding command.                   |\n'--------------+------------------------------------------------------------'\n| ,            | Redo the last character finding command in opposite        |\n|              | direction.                                                 |\n'--------------+------------------------------------------------------------'\n| |            | Move to the n-th column (you may specify the argument n by |\n|              | typing it on number keys, for example, 20|)                |\n'--------------'------------------------------------------------------------'\n| Deletion Commands:                                                        |\n'--------------.------------------------------------------------------------'\n| x            | Delete a single character under the cursor.                |\n'--------------+------------------------------------------------------------'\n| X            | Delete a character before the cursor.                      |\n'--------------+------------------------------------------------------------'\n| d&lt;mov. comm&gt; | Delete text of a movement command &lt;mov. comm&gt; (see above). |\n'--------------+------------------------------------------------------------'\n| D            | Delete to the end of the line (equivalent to d$).          |\n'--------------+------------------------------------------------------------'\n| dd           | Delete current line (equivalent to 0d$).                   |\n'--------------+------------------------------------------------------------'\n| CTRL-w       | Delete the previous word.                                  |\n'--------------+------------------------------------------------------------'\n| CTRL-u       | Delete from the cursor to the beginning of line.           |\n'--------------'------------------------------------------------------------'\n| Undo, Redo and Copy/Paste Commands:                                       |\n'--------------.------------------------------------------------------------'\n| u            | Undo previous text modification.                           |\n'--------------+------------------------------------------------------------'\n| U            | Undo all previous text modifications.                      |\n'--------------+------------------------------------------------------------'\n| .            | Redo the last text modification.                           |\n'--------------+------------------------------------------------------------'\n| y&lt;mov. comm&gt; | Yank a movement into buffer (copy).                        |\n'--------------+------------------------------------------------------------'\n| yy           | Yank the whole line.                                       |\n'--------------+------------------------------------------------------------'\n| p            | Insert the yanked text at the cursor.                      |\n'--------------+------------------------------------------------------------'\n| P            | Insert the yanked text before the cursor.                  |\n'--------------'------------------------------------------------------------'\n| Commands for Command History:                                             |\n'--------------.------------------------------------------------------------'\n| k            | Move backward one command in history.                      |\n'--------------+------------------------------------------------------------'\n| j            | Move forward one command in history.                       |\n'--------------+------------------------------------------------------------'\n| G            | Move to history line N (for example, 15G).                 |\n'--------------+------------------------------------------------------------'\n| /string or   | Search history backward for a command matching string.     |\n| CTRL-r       |                                                            |\n'--------------+------------------------------------------------------------'\n| ?string or   | Search history forward for a command matching string.      |\n| CTRL-s       | (Note that on most machines Ctrl-s STOPS the terminal      |\n|              | output, change it with `stty' (Ctrl-q to resume)).         |\n'--------------+------------------------------------------------------------'\n| n            | Repeat search in the same direction as previous.           |\n'--------------+------------------------------------------------------------'\n| N            | Repeat search in the opposite direction as previous.       |\n'--------------'------------------------------------------------------------'\n| Completion commands:                                                      |\n'--------------.------------------------------------------------------------'\n| TAB or = or  | List all possible completions.                             |\n| CTRL-i       |                                                            |\n'--------------+------------------------------------------------------------'\n| *            | Insert all possible completions.                           |\n'--------------'------------------------------------------------------------'\n| Miscellaneous commands:                                                   |\n'--------------.------------------------------------------------------------'\n| ~            | Invert case of the character under cursor and move a       |\n|              | character right.                                           |\n'--------------+------------------------------------------------------------'\n| #            | Prepend '#' (comment character) to the line and send it to |\n|              | the history.                                               |\n'--------------+------------------------------------------------------------'\n| _            | Inserts the n-th word of the previous command in the       |\n|              | current line.                                              |\n'--------------+------------------------------------------------------------'\n| 0, 1, 2, ... | Sets the numeric argument.                                 |\n'--------------+------------------------------------------------------------'\n| CTRL-v       | Insert a character literally (quoted insert).              |\n'--------------+------------------------------------------------------------'\n| CTRL-r       | Transpose (exchange) two characters.                       |\n'--------------'------------------------------------------------------------'\n\n ===========================================================================\n\n.---------------------------------------------------------------------------.\n| Peteris Krumins (peter@catonmat.net), 2008.01.08.                         |\n| http://www.catonmat.net  -  good coders code, great reuse                 | \n|                                                                           |\n| Released under the GNU Free Document License                              |\n'---------------------------------------------------------------------------'\n</code></pre>","tags":["vim","regex","automation"]},{"location":"bujo/2023/","title":"2023","text":"<ul> <li>workflow</li> <li>applying the new workflow</li> <li>and some feng shui to my cheatsheets</li> </ul>"},{"location":"bujo/bujo/","title":"bullet journaling","text":"<ul> <li>bullet journaling is simply using bullets in your notes!</li> <li>to keep notes concise, it is not magic</li> <li>it existed on paper, now the bullet journal guy that sells the book named this...</li> <li>is trying to patent and copyright silly things like the portmanteauu <code>bujo</code></li> <li>dude, are you serious...</li> <li> with optional added syntax like *oO-x etc.</li> </ul>","tags":["bujo","click","aliases"]},{"location":"bujo/bujo/#alias","title":"alias","text":"<pre><code># bullet journaling aka bujo\nalias rd=\"vim ./readme.md\"\nalias cl=\"vim ./changelog.md\"\nalias jf='mkdir \"$(date +%F)\" &amp;&amp; cd \"$(date +%F)\"'\nalias ft='vim ./future.md'\nalias cll='vim ./collections.md'\nalias in='vim ./index.md'\nalias fj='vim ./\"$(date +%F)\".md'\nalias bj='cd ./bujo &amp;&amp; fj || echo \"there is no bujo folder\"'\nalias bujo='cd ./bujo &amp;&amp; fj || mkdir bujo &amp;&amp; cd ./bujo &amp;&amp; vim ./\"$(date +%F)\".md'\n</code></pre>","tags":["bujo","click","aliases"]},{"location":"bujo/bujo/#click","title":"click","text":"<pre><code>Usage: cli.py bujo [OPTIONS] COMMAND [ARGS]...\n\nbullet journaling &amp; todocli\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  day        week - cps state rollback test\ndayfolder  create subfolder with named todays date\n  edit       edit plugin\n  folder     create bujo folder\n  future     bujo index file\n  index      bujo index file\n  m          mkdocs serve\n  month      month file\n  read       read a bujo/ file\n  remote     jobs on remotive\n  s          start dev server\n  snip       open snippet maker\n  todo       generic todo\n  week       week - cps state rollback test\nww         weather\n  year       week - cps state rollback test\nzl         markdownlint\n</code></pre>","tags":["bujo","click","aliases"]},{"location":"","title":"Home","text":"<p>home workflow template buddhism</p> <p>retro games</p> <p>Info</p> <ul> <li>cheats snippets and tiny automation tools to supplement this project template:</li> <li>workflow cookiecutter</li> </ul>"},{"location":"#alias","title":"alias","text":"<ul> <li>mkdocs</li> </ul>"},{"location":"#aliases","title":"aliases","text":"<ul> <li>bullet journaling</li> </ul>"},{"location":"#automation","title":"automation","text":"<ul> <li>regex</li> <li>vim</li> </ul>"},{"location":"#bujo","title":"bujo","text":"<ul> <li>bullet journaling</li> </ul>"},{"location":"#click","title":"click","text":"<ul> <li>mkdocs</li> <li>bullet journaling</li> </ul>"},{"location":"#docs","title":"docs","text":"<ul> <li>markdown</li> </ul>"},{"location":"#markdown","title":"markdown","text":"<ul> <li>markdown</li> </ul>"},{"location":"#mkdocs","title":"mkdocs","text":"<ul> <li>mkdocs</li> </ul>"},{"location":"#readability","title":"readability","text":"<ul> <li>markdown</li> <li>regex</li> </ul>"},{"location":"#regex","title":"regex","text":"<ul> <li>regex</li> <li>vim</li> </ul>"},{"location":"#style-guide","title":"style guide","text":"<ul> <li>regex</li> </ul>"},{"location":"#vim","title":"vim","text":"<ul> <li>vim</li> </ul>"}]}